buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id "com.google.protobuf" version "0.9.4"
    id "com.github.davidmc24.gradle.plugin.avro" version "1.9.1"
    id 'com.gradleup.shadow' version '9.2.2'
}

group = 'io.confluent.developer'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url 'https://packages.confluent.io/maven'
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'generated-sbe', 'generated-capnp'
        }
    }
}

jar {
    manifest {
        attributes "Main-Class": "org.openjdk.jmh.Main"
    }
}

shadowJar {
    archiveBaseName = "serialization-benchmarks"
    archiveClassifier = ''
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:4.29.3'
    }
}

def propertiesFile = file('config.properties')
def configProps = new Properties()
if (propertiesFile.exists()) {
    propertiesFile.withInputStream { inputStream ->
        configProps.load(inputStream)
    }
} else {
    logger.warn("Properties file not found at: ${propertiesFile.canonicalPath}")
}


tasks.register('sbe', JavaExec) {
    systemProperty("sbe.output.dir", "generated-sbe")
    systemProperty("sbe.xinclude.aware", "true")
    group = "Execution"
    description = "Runs the SBE tool to generate code from schemas"
    classpath = configurations.runtimeClasspath
    mainClass = "uk.co.real_logic.sbe.SbeTool"
    args "src/main/resources/sbe-schema/stock-schema.xml"
}

tasks.register('capnp', Exec) {
    group = "Execution"
    description = "Runs Cap'n Proto compiler to generate Java code from schemas (skipped if capnpc-java not found)"

    // Check if capnpc-java exists
    onlyIf {
        def capnpcJavaPath = './capnpc-java'
        def capnpcJavaFile = file(capnpcJavaPath)
        if (capnpcJavaFile.exists()) {
            logger.info("Found capnpc-java at: ${capnpcJavaFile.absolutePath}")
            return true
        } else {
            logger.warn("Skipping capnp task - capnpc-java not found at: ${capnpcJavaFile.absolutePath}")
            logger.warn("To enable Cap'n Proto support, download capnpc-java from https://github.com/capnproto/capnproto-java")
            return false
        }
    }

    commandLine 'capnp', 'compile', '-o', './capnpc-java:./generated-capnp',
            'src/main/resources/capnp-schema/stock-schema.capnp',
            '--src-prefix=src/main/resources/capnp-schema'

    // Don't fail build if capnp command not found
    ignoreExitValue = true
}

tasks.register('jmh', JavaExec) {
    dependsOn shadowJar
    group = "benchmark"
    description = "Run JMH benchmarks (use -PenableProfiling=true to enable async-profiler)"
    classpath = files(shadowJar.archiveFile)

    def asyncProfilerLibName = configProps.envName?.trim()
    def asyncProfilerLibLocation = configProps.envValue?.trim()
    def enableProfiling = false

    // Only set environment if asyncProfilerLibName and asyncProfilerLibLocation are defined
    if (asyncProfilerLibName && asyncProfilerLibLocation) {
        enableProfiling = true
        environment asyncProfilerLibName, asyncProfilerLibLocation
        logger.info("Setting environment: ${asyncProfilerLibName}=${asyncProfilerLibLocation}")
    }

    mainClass = "io.confluent.developer.jmh.SerializationBenchmarks"
    args = [enableProfiling]

    jvmArgs = [
            "--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED",
            "--add-exports=java.base/sun.nio.ch=ALL-UNNAMED",
            "--add-opens=java.base/java.nio=ALL-UNNAMED",
            "-XX:+UseG1GC",
            "-XX:+UnlockDiagnosticVMOptions",
            "-XX:+DebugNonSafepoints",
            "-Xms8g",
            "-Xmx8g"
    ]

    doFirst {
        if (enableProfiling == true) {
            logger.lifecycle("Running benchmarks WITH async-profiler enabled")
        } else {
            logger.lifecycle("Running benchmarks WITHOUT async-profiler (use -PenableProfiling=true to enable)")
        }
    }
}

tasks.register('generateHtmlReport', JavaExec) {
    group = "benchmark"
    description = "Generate HTML report from benchmark results (use -PjsonFile=<path> and -PhtmlFile=<path> to customize)"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "io.confluent.developer.util.BenchmarkHtmlGenerator"

    // Allow customization of input/output files
    def jsonFile = project.findProperty('jsonFile') ?: 'benchmark-results.json'
    def htmlFile = project.findProperty('htmlFile') ?: 'benchmark-results.html'

    args = [jsonFile, htmlFile]

    doFirst {
        def jsonPath = file(jsonFile)
        if (!jsonPath.exists()) {
            throw new GradleException("Benchmark results file not found: ${jsonPath.absolutePath}\n" +
                    "Please run './gradlew jmh' first to generate benchmark results.")
        }
        logger.lifecycle("Generating HTML report from: ${jsonPath.absolutePath}")
        logger.lifecycle("Output will be written to: ${file(htmlFile).absolutePath}")
    }

    doLast {
        def outputFile = file(htmlFile)
        if (outputFile.exists()) {
            logger.lifecycle("âœ“ HTML report generated successfully!")
            logger.lifecycle("  Open: ${outputFile.absolutePath}")
        }
    }
}

tasks.register('benchmarkAll') {
    dependsOn jmh, generateHtmlReport
    group = "benchmark"
    description = "Run JMH benchmarks and generate HTML report"

    // Ensure jmh runs before generateHtmlReport
    generateHtmlReport.mustRunAfter jmh

    doLast {
        logger.lifecycle("=" * 60)
        logger.lifecycle("Benchmark suite completed!")
        logger.lifecycle("Results: benchmark-results.json")
        logger.lifecycle("Report:  benchmark-results.html")
        logger.lifecycle("=" * 60)
    }
}

clean {
    delete fileTree('generated-capnp/') { include '*/.java' }
}

clean.doLast {
    file('generated-sbe/baseline').deleteDir()
}

compileJava {
    dependsOn(generateProto, sbe, capnp)
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}


dependencies {
    implementation 'org.apache.kafka:kafka-clients:4.1.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.2'
    implementation 'net.datafaker:datafaker:2.5.1'

    implementation 'org.openjdk.jmh:jmh-core:1.37'
    implementation 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    implementation 'com.google.protobuf:protobuf-java:4.29.3'
    implementation 'org.apache.avro:avro:1.12.0'
    implementation 'uk.co.real-logic:sbe-all:1.36.0'
    implementation 'com.esotericsoftware:kryo:5.6.2'
    implementation 'org.apache.fory:fory-core:0.12.3'
    implementation 'org.capnproto:runtime:0.1.16'

    implementation "io.confluent:kafka-avro-serializer:8.0.0"
    implementation "io.confluent:kafka-protobuf-serializer:8.0.0"
    implementation "io.confluent:kafka-json-serializer:8.0.0"
    implementation "io.confluent:kafka-schema-registry-client:8.0.0"
    implementation "io.confluent:kafka-protobuf-provider:8.0.0"

    implementation 'org.slf4j:slf4j-simple:2.0.17'

    testImplementation 'org.junit.jupiter:junit-jupiter:6.0.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:6.0.0'
}

test {
    useJUnitPlatform()
    jvmArgs("--add-exports=java.base/jdk.internal.misc=ALL-UNNAMED")
}
